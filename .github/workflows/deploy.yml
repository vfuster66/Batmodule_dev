name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'

jobs:
  # Tests prÃ©-dÃ©ploiement
  pre-deploy-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: batmodule_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install all dependencies
        run: npm run install:all

      - name: Setup database
        run: |
          cd backend
          PGPASSWORD=test psql -h localhost -U test -d postgres -c "CREATE DATABASE batmodule_test;" || true
          npm run migrate

      - name: Run all tests
        run: |
          # Tests backend
          cd backend
          npm run test:ci

          # Tests frontend
          cd ../frontend
          npm run test:coverage
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/batmodule_test
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-ci
          ENCRYPTION_KEY: test-encryption-key-32-chars-long

  # Build et dÃ©ploiement
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: pre-deploy-tests
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install all dependencies
        run: npm run install:all

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.prod -t batmodule:${{ github.sha }} .
          docker tag batmodule:${{ github.sha }} batmodule:latest

      - name: Deploy to staging
        if: github.event.inputs.environment == 'staging' || (github.ref == 'refs/heads/main' && github.event.inputs.environment == '')
        run: |
          echo "ðŸš€ DÃ©ploiement vers staging"
          # Ici vous ajouteriez votre logique de dÃ©ploiement vers staging
          # Par exemple : kubectl apply, docker-compose up, etc.
          echo "âœ… DÃ©ploiement staging terminÃ©"

      - name: Deploy to production
        if: github.event.inputs.environment == 'production'
        run: |
          echo "ðŸš€ DÃ©ploiement vers production"
          # Ici vous ajouteriez votre logique de dÃ©ploiement vers production
          # Par exemple : kubectl apply, docker-compose up, etc.
          echo "âœ… DÃ©ploiement production terminÃ©"

      - name: Notify deployment
        run: |
          echo "## ðŸš€ DÃ©ploiement RÃ©ussi" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### âœ… Tests PassÃ©s" >> $GITHUB_STEP_SUMMARY
          echo "- Backend tests" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend tests" >> $GITHUB_STEP_SUMMARY
          echo "- Integration tests" >> $GITHUB_STEP_SUMMARY
