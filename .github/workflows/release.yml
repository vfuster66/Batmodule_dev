name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  # Tests avant release
  pre-release-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: batmodule_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install all dependencies
        run: npm run install:all

      - name: Setup database
        run: |
          cd backend
          PGPASSWORD=test psql -h localhost -U test -d postgres -c "CREATE DATABASE batmodule_test;" || true
          npm run migrate

      - name: Run all tests
        run: npm run test:ci
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/batmodule_test
          NODE_ENV: test
          JWT_SECRET: test-secret-key-for-ci
          ENCRYPTION_KEY: test-encryption-key-32-chars-long

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: |
          cd frontend && npm run format:check
          cd ../backend && npm run format:check

  # Build et création de la release
  create-release:
    runs-on: ubuntu-latest
    needs: pre-release-tests
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install all dependencies
        run: npm run install:all

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Générer un changelog basique
          if [ "${{ github.event_name }}" = "push" ]; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$PREVIOUS_TAG" ]; then
              CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
            else
              CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=10)
            fi
          else
            CHANGELOG="Release ${{ steps.version.outputs.version }}"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## 🚀 Release ${{ steps.version.outputs.version }}

            ### 📋 Changelog
            ${{ steps.changelog.outputs.changelog }}

            ### 🏗️ Build Info
            - **Commit:** ${{ github.sha }}
            - **Branch:** ${{ github.ref_name }}
            - **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

            ### ✅ Tests
            - Backend tests: ✅ Passed
            - Frontend tests: ✅ Passed
            - Integration tests: ✅ Passed
            - Code quality: ✅ Passed

            ### 📦 Assets
            - Docker image: `batmodule:${{ steps.version.outputs.version }}`
            - Frontend build: Available in artifacts
          draft: false
          prerelease: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build-${{ steps.version.outputs.version }}
          path: frontend/dist/

  # Build Docker image pour la release
  build-docker:
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/batmodule:${{ needs.create-release.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/batmodule:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Notification de la release
  notify-release:
    runs-on: ubuntu-latest
    needs: [create-release, build-docker]
    if: always()

    steps:
      - name: Release Summary
        run: |
          echo "## 🎉 Release ${{ needs.create-release.outputs.version }} Créée" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ secrets.DOCKER_USERNAME }}/batmodule:${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Changelog" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.create-release.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
